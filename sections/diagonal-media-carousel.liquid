{% comment %}
Diagonal Animated Media Carousel
- Alpine.js 3, TailwindCSS, and Shopify Liquid.
- Clean, robust, animated, and fully functional.
- Shows cards, preview, next arrow, autoplay, and touch.
{% endcomment %}

<section
  x-data="diagonalCarousel({
    initial: 0,
    autoplay: {{ section.settings.autoplay | json }},
    interval: {{ section.settings.autoplay_interval }},
    count: {{ section.blocks.size }}
  })"
  x-init="init()"
  @keydown.right.window="next()"
  class="w-full flex justify-center items-center py-8 relative select-none"
>
  <div class="w-full flex justify-center items-center">
    <div
      class="relative w-full aspect-[1/1] min-h-[320px] sm:min-h-[420px] max-w-full sm:max-w-3xl flex items-center justify-center"
      style="max-width:36rem;"
    >
      <!-- CARDS -->
      <template x-if="cards.length > 0">
        <template x-for="(card, idx) in visibleCards()" :key="card.id">
          <a
            x-bind:href="card.link || '#'"
            x-bind:tabindex="isMain(idx) ? 0 : -1"
            x-bind:aria-hidden="!isMain(idx)"
            class="absolute inset-0 flex items-center justify-center transition-all duration-700 ease-[cubic-bezier(.77,0,.175,1)]"
            :class="cardClass(idx)"
            @click.prevent="isPreview(idx) ? next() : null"
            x-bind:style="isPreview(idx) ? 'cursor:pointer;' : ''"
          >
            <div
              class="relative w-full h-full rounded-2xl overflow-hidden shadow-xl bg-white transition-all duration-700"
              :class="{
                'pointer-events-auto': isMain(idx),
                'pointer-events-none': !isMain(idx)
              }"
            >
              <template x-if="card.image">
                <img
                  :src="card.image"
                  :alt="card.title"
                  class="object-cover object-center w-full h-full"
                  loading="lazy"
                  draggable="false"
                />
              </template>
              <template x-if="!card.image">
                <div class="w-full h-full bg-gray-200 flex items-center justify-center text-gray-500 text-3xl">
                  <svg class="w-12 h-12 opacity-40" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                    <circle cx="12" cy="12" r="10"/>
                    <path d="M8 12l2 2 4-4"/>
                  </svg>
                </div>
              </template>
              <div class="absolute bottom-0 left-0 w-full px-4 py-2 bg-gradient-to-t from-black/60 to-transparent text-white font-bold text-lg">
                <span x-text="card.title"></span>
              </div>
            </div>
          </a>
        </template>
      </template>
      <!-- RIGHT ARROW BUTTON -->
      <template x-if="cards.length > 1">
        <button
          type="button"
          class="absolute z-30 bottom-4 right-4 md:bottom-6 md:right-6 bg-white/80 hover:bg-black/80 hover:text-white text-black rounded-full p-2 shadow-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black"
          @click="next()"
          :disabled="transitioning"
          aria-label="Next"
          x-bind:class="{ 'opacity-60 pointer-events-none': transitioning }"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" stroke-width="3" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7"/>
          </svg>
        </button>
      </template>
      <!-- AUTOPLAY TOGGLE -->
      <template x-if="{{ section.settings.show_autoplay_toggle | json }} && cards.length > 1">
        <button
          type="button"
          class="absolute z-30 bottom-4 left-4 md:bottom-6 md:left-6 bg-white/80 hover:bg-black/80 hover:text-white text-black rounded-full p-2 shadow-lg transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black"
          @click="autoplay = !autoplay"
          aria-label="Toggle autoplay"
        >
          <template x-if="autoplay">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <rect x="6" y="4" width="4" height="16" rx="1" />
              <rect x="14" y="4" width="4" height="16" rx="1" />
            </svg>
          </template>
          <template x-if="!autoplay">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
              <polygon points="5,3 19,12 5,21" />
            </svg>
          </template>
        </button>
      </template>
    </div>
  </div>
  <!-- Swipe support (mobile) -->
  <div
    class="absolute inset-0 z-30"
    x-ref="swipe"
    @touchstart="touchStart($event)"
    @touchmove="touchMove($event)"
    @touchend="touchEnd($event)"
    style="touch-action: pan-y;"
  ></div>
  <script>
    function diagonalCarousel({ initial = 0, autoplay = false, interval = 4000, count = 0 }) {
      return {
        currentIndex: initial,
        transitioning: false,
        _autoplay: autoplay,
        interval: interval,
        timer: null,
        cards: [
          {% for block in section.blocks %}
            {
              id: {{ block.id | json }},
              image: {% if block.settings.image != blank %}"{{ block.settings.image | image_url: width: 800 }}"{% else %}null{% endif %},
              title: {{ block.settings.title | json }},
              link: {{ block.settings.link | json }}
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        ],
        init() {
          if (this.autoplay && this.cards.length > 1) this.startAutoplay();
        },
        startAutoplay() {
          this.stopAutoplay();
          if (this.cards.length < 2) return;
          this.timer = setInterval(() => { this.next(); }, this.interval);
        },
        stopAutoplay() {
          if (this.timer) clearInterval(this.timer);
          this.timer = null;
        },
        get autoplay() { return this._autoplay; },
        set autoplay(val) {
          this._autoplay = val;
          if (val && this.cards.length > 1) this.startAutoplay();
          else this.stopAutoplay();
        },
        next() {
          if (this.transitioning || this.cards.length < 2) return;
          this.transitioning = true;
          setTimeout(() => {
            this.advance();
            this.transitioning = false;
          }, 700);
        },
        advance() {
          this.cards.push(this.cards.shift());
        },
        visibleCards() {
          if (this.cards.length === 1) return [this.cards[0]];
          return [this.cards[0], this.cards[1]];
        },
        isMain(idx) { return idx === 0; },
        isPreview(idx) { return idx === 1 && this.cards.length > 1; },
        cardClass(idx) {
          // Main (center) card
          if (this.isMain(idx) && !this.transitioning)
            return 'z-10 scale-100 shadow-xl opacity-100 translate-x-0 translate-y-0';
          // Main card animating out up/left
          if (this.isMain(idx) && this.transitioning)
            return 'z-0 scale-75 opacity-50 -translate-x-16 -translate-y-16 pointer-events-none';
          // Preview animating in to center
          if (this.isPreview(idx) && this.transitioning)
            return 'z-10 scale-100 opacity-100 translate-x-0 translate-y-0';
          // Preview at rest, bottom right
          if (this.isPreview(idx))
            return 'z-0 scale-75 opacity-75 translate-x-12 translate-y-12 pointer-events-auto absolute bottom-4 right-4';
          // Hide all others
          return 'hidden';
        },
        // Touch/Swipe (mobile)
        touch: { x: 0, y: 0, dx: 0, dy: 0, active: false },
        touchStart(e) {
          if (!e.touches) return;
          let t = e.touches[0];
          this.touch = { x: t.clientX, y: t.clientY, dx: 0, dy: 0, active: true };
        },
        touchMove(e) {
          if (!this.touch.active || !e.touches) return;
          let t = e.touches[0];
          this.touch.dx = t.clientX - this.touch.x;
          this.touch.dy = t.clientY - this.touch.y;
        },
        touchEnd(e) {
          if (!this.touch.active) return;
          // Only right-to-left swipe triggers advance
          if (this.touch.dx < -50 && Math.abs(this.touch.dy) < 60) this.next();
          this.touch = { x: 0, y: 0, dx: 0, dy: 0, active: false };
        }
      }
    }
  </script>
</section>

{% schema %}
{
  "name": "Diagonal Media Carousel",
  "settings": [
    {
      "type": "checkbox",
      "id": "autoplay",
      "label": "Enable autoplay",
      "default": true
    },
    {
      "type": "range",
      "id": "autoplay_interval",
      "label": "Autoplay Interval (ms)",
      "min": 2000,
      "max": 9000,
      "step": 500,
      "default": 4000
    },
    {
      "type": "checkbox",
      "id": "show_autoplay_toggle",
      "label": "Show autoplay toggle button",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "media_card",
      "name": "Media Card",
      "settings": [
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        },
        {
          "type": "text",
          "id": "title",
          "label": "Title"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Link"
        }
      ]
    }
  ],
  "max_blocks": 10,
  "presets": [
    {
      "name": "Diagonal Media Carousel",
      "category": "Media",
      "blocks": [
        { "type": "media_card" },
        { "type": "media_card" }
      ]
    }
  ]
}
{% endschema %}